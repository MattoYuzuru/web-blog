services:
  # Database
  postgres:
    image: postgres:17-alpine
    container_name: keykomi-blog-postgres
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql
    networks:
      - blog-network
    restart: unless-stopped
    ports:
      - "5431:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend
  blog-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: keykomi-blog-backend
    ports:
      - "8081:8080"
    env_file:
      - .env
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      AWS_REGION: ${AWS_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_BUCKET_NAME: ${AWS_BUCKET_NAME}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - blog-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  blog-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: http://localhost:8081
    container_name: keykomi-blog-frontend
    ports:
      - "3001:3000"
    env_file:
      - .env
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8081
      INTERNAL_API_URL: http://blog-backend:8080
    depends_on:
      blog-backend:
        condition: service_healthy
    networks:
      - blog-network
    restart: unless-stopped

networks:
  blog-network:
    driver: bridge

volumes:
  postgres_data:
