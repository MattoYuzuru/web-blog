services:
  # Frontend
  blog-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: keykomi-blog-frontend
    ports:
      - "3001:3000"
    env_file:
      - .env
    environment:
      NEXT_PUBLIC_API_URL: http://blog-backend:8001
    depends_on:
      - blog-backend
    networks:
      - blog-network
    restart: unless-stopped

  # Backend
  blog-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: keykomi-blog-backend
    ports:
      - "8081:8080"
    env_file:
      - .env
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - blog-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: keykomi-blog-nginx
    ports:
      - "80:80"
      - "443:443"
      # Uncomment for SSL
      # - ./ssl:/etc/ssl/certs:ro
    depends_on:
      - blog-frontend
    networks:
      - blog-network
    restart: unless-stopped

  # DB
  postgres:
    image: postgres:17-alpine
    container_name: keykomi-blog-postgres
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
#      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - blog-network
    restart: unless-stopped
    ports:
      - "5431:5432"

networks:
  blog-network:
    driver: bridge

volumes:
  postgres_data: